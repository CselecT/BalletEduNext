// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ExamLevel {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum ExamStatus {
  ONGOING
  TO_BE_EVALUATED
  REVIEW
  COMPLETED
}

model Exam {
  id       Int        @id @default(autoincrement())
  level    ExamLevel
  markings Float[]
  evals    String[]
  status   ExamStatus
  students Student[]
  teachers Teacher[]
  juryId   Int        @map("jury_id")
  jury     Jury       @relation(fields: [juryId], references: [id], onDelete: Cascade)
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  birthDate DateTime
  email     String?  @unique
  phone     String?
  exams     Exam[]
  schoolId  Int      @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model School {
  id       Int       @id @default(autoincrement())
  name     String
  location String?   @db.Text
  students Student[]
  teachers Teacher[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  birthDate DateTime
  email     String?  @unique
  phone     String?
  exams     Exam[]
  schoolId  Int      @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Jury {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  birthDate DateTime
  email     String?  @unique
  phone     String?
  exams     Exam[]
}
